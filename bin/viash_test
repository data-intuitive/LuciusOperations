#!/usr/bin/env bash

# viash_test 0.6.3
# 
# This wrapper script is auto-generated by viash 0.6.3 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="viash_test"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "viash_test 0.6.3"
  echo ""
  echo "Test a project, usually in the context of a pipeline."
  echo ""
  echo "Arguments:"
  echo "    -s, --src"
  echo "        type: file"
  echo "        default: src"
  echo "        Directory for sources if different from src/"
  echo ""
  echo "    -m, --mode"
  echo "        type: string"
  echo "        default: development"
  echo "        The mode to run in. Possible values are: 'development', 'integration',"
  echo "        'release'."
  echo ""
  echo "    -p, --platform"
  echo "        type: string"
  echo "        default: docker"
  echo "        Which platforms to process."
  echo ""
  echo "    -q, --query"
  echo "        type: string"
  echo "        example: ^mynamespace/component1\$"
  echo "        Filter which components get selected by component and namespace name."
  echo "        Can be a regex."
  echo ""
  echo "    -n, --query_namespace"
  echo "        type: string"
  echo "        example: ^mynamespace\$"
  echo "        Filter which namespaces get selected by namespace name. Can be a regex."
  echo ""
  echo "    --query_name"
  echo "        type: string"
  echo "        example: ^component1\$"
  echo "        Filter which components get selected by component name. Can be a regex."
  echo ""
  echo "    -t, --tag"
  echo "        type: string"
  echo "        example: 0.1.0"
  echo "        Which tag/version of the pipeline to use."
  echo ""
  echo "    -r, --registry"
  echo "        type: string"
  echo "        default: ghcr.io"
  echo "        example: ghcr.io"
  echo "        Which Docker registry to use in the Docker image name."
  echo ""
  echo "    -o, --organisation, --organization"
  echo "        type: string"
  echo "        default: openpipelines-bio"
  echo "        example: myorganisation"
  echo "        Which organisation name to use in the Docker image name."
  echo ""
  echo "    -tis, --target_image_source"
  echo "        type: string"
  echo "        default: https://github.com/openpipelines-bio/openpipeline"
  echo "        example: https://github.com/myorganisation/myrepository"
  echo "        Which image source to specify in the component builds."
  echo ""
  echo "    --namespace_separator"
  echo "        type: string"
  echo "        example: _"
  echo "        The separator to use between the component name and namespace as the"
  echo "        image name of a Docker container."
  echo ""
  echo "    --nextflow_variant"
  echo "        type: string"
  echo "        [Deprecated] Which nextflow variant to use."
  echo ""
  echo "    --max_threads"
  echo "        type: integer"
  echo "        example: 8"
  echo "        The maximum number of threads viash will use when \`--parallel\` during"
  echo "        parallel tasks."
  echo ""
  echo "    -c, --config_mod"
  echo "        type: string, multiple values allowed"
  echo "        Modify a viash config at runtime using a custom DSL."
  echo ""
  echo "    --tsv"
  echo "        type: file"
  echo "        example: .viash_test_log.tsv"
  echo "        Test results stored as a tabular text file."
  echo ""
  echo "    -nc, --no-cache, --no_cache"
  echo "        type: boolean_true"
  echo "        Don't cache the docker build in development mode."
  echo ""
  echo "    -l, --log"
  echo "        type: file"
  echo "        example: .viash_test_log.txt"
  echo "        Test log file"
  echo ""
  echo "    --append"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Append to the log file?"
  echo ""
  echo "    --viash"
  echo "        type: file"
  echo "        default: bin/viash"
  echo "        A path to the viash executable. If not specified, this component will"
  echo "        look for 'viash' on the \$PATH."
  echo ""
  echo "    --verbose"
  echo "        type: boolean_true"
  echo "        Increase verbosity."
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "viash_test 0.6.3"
            exit
            ;;
        --src)
            [ -n "$VIASH_PAR_SRC" ] && ViashError Bad arguments for option \'--src\': \'$VIASH_PAR_SRC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SRC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --src. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --src=*)
            [ -n "$VIASH_PAR_SRC" ] && ViashError Bad arguments for option \'--src=*\': \'$VIASH_PAR_SRC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SRC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -s)
            [ -n "$VIASH_PAR_SRC" ] && ViashError Bad arguments for option \'-s\': \'$VIASH_PAR_SRC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SRC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -s. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --mode)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'--mode\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --mode. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --mode=*)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'--mode=*\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -m)
            [ -n "$VIASH_PAR_MODE" ] && ViashError Bad arguments for option \'-m\': \'$VIASH_PAR_MODE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -m. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --platform)
            [ -n "$VIASH_PAR_PLATFORM" ] && ViashError Bad arguments for option \'--platform\': \'$VIASH_PAR_PLATFORM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLATFORM="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --platform. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --platform=*)
            [ -n "$VIASH_PAR_PLATFORM" ] && ViashError Bad arguments for option \'--platform=*\': \'$VIASH_PAR_PLATFORM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLATFORM=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -p)
            [ -n "$VIASH_PAR_PLATFORM" ] && ViashError Bad arguments for option \'-p\': \'$VIASH_PAR_PLATFORM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PLATFORM="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -p. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query)
            [ -n "$VIASH_PAR_QUERY" ] && ViashError Bad arguments for option \'--query\': \'$VIASH_PAR_QUERY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --query. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query=*)
            [ -n "$VIASH_PAR_QUERY" ] && ViashError Bad arguments for option \'--query=*\': \'$VIASH_PAR_QUERY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -q)
            [ -n "$VIASH_PAR_QUERY" ] && ViashError Bad arguments for option \'-q\': \'$VIASH_PAR_QUERY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -q. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query_namespace)
            [ -n "$VIASH_PAR_QUERY_NAMESPACE" ] && ViashError Bad arguments for option \'--query_namespace\': \'$VIASH_PAR_QUERY_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY_NAMESPACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --query_namespace. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query_namespace=*)
            [ -n "$VIASH_PAR_QUERY_NAMESPACE" ] && ViashError Bad arguments for option \'--query_namespace=*\': \'$VIASH_PAR_QUERY_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY_NAMESPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -n)
            [ -n "$VIASH_PAR_QUERY_NAMESPACE" ] && ViashError Bad arguments for option \'-n\': \'$VIASH_PAR_QUERY_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY_NAMESPACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -n. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query_name)
            [ -n "$VIASH_PAR_QUERY_NAME" ] && ViashError Bad arguments for option \'--query_name\': \'$VIASH_PAR_QUERY_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --query_name. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --query_name=*)
            [ -n "$VIASH_PAR_QUERY_NAME" ] && ViashError Bad arguments for option \'--query_name=*\': \'$VIASH_PAR_QUERY_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_QUERY_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --tag)
            [ -n "$VIASH_PAR_TAG" ] && ViashError Bad arguments for option \'--tag\': \'$VIASH_PAR_TAG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TAG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tag. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tag=*)
            [ -n "$VIASH_PAR_TAG" ] && ViashError Bad arguments for option \'--tag=*\': \'$VIASH_PAR_TAG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TAG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            [ -n "$VIASH_PAR_TAG" ] && ViashError Bad arguments for option \'-t\': \'$VIASH_PAR_TAG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TAG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -t. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --registry)
            [ -n "$VIASH_PAR_REGISTRY" ] && ViashError Bad arguments for option \'--registry\': \'$VIASH_PAR_REGISTRY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --registry. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --registry=*)
            [ -n "$VIASH_PAR_REGISTRY" ] && ViashError Bad arguments for option \'--registry=*\': \'$VIASH_PAR_REGISTRY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REGISTRY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            [ -n "$VIASH_PAR_REGISTRY" ] && ViashError Bad arguments for option \'-r\': \'$VIASH_PAR_REGISTRY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REGISTRY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --organization)
            [ -n "$VIASH_PAR_ORGANIZATION" ] && ViashError Bad arguments for option \'--organization\': \'$VIASH_PAR_ORGANIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORGANIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --organization. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --organization=*)
            [ -n "$VIASH_PAR_ORGANIZATION" ] && ViashError Bad arguments for option \'--organization=*\': \'$VIASH_PAR_ORGANIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORGANIZATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            [ -n "$VIASH_PAR_ORGANIZATION" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_ORGANIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORGANIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --organisation)
            [ -n "$VIASH_PAR_ORGANIZATION" ] && ViashError Bad arguments for option \'--organisation\': \'$VIASH_PAR_ORGANIZATION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ORGANIZATION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --organisation. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --target_image_source)
            [ -n "$VIASH_PAR_TARGET_IMAGE_SOURCE" ] && ViashError Bad arguments for option \'--target_image_source\': \'$VIASH_PAR_TARGET_IMAGE_SOURCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TARGET_IMAGE_SOURCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --target_image_source. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --target_image_source=*)
            [ -n "$VIASH_PAR_TARGET_IMAGE_SOURCE" ] && ViashError Bad arguments for option \'--target_image_source=*\': \'$VIASH_PAR_TARGET_IMAGE_SOURCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TARGET_IMAGE_SOURCE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -tis)
            [ -n "$VIASH_PAR_TARGET_IMAGE_SOURCE" ] && ViashError Bad arguments for option \'-tis\': \'$VIASH_PAR_TARGET_IMAGE_SOURCE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TARGET_IMAGE_SOURCE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -tis. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --namespace_separator)
            [ -n "$VIASH_PAR_NAMESPACE_SEPARATOR" ] && ViashError Bad arguments for option \'--namespace_separator\': \'$VIASH_PAR_NAMESPACE_SEPARATOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAMESPACE_SEPARATOR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --namespace_separator. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --namespace_separator=*)
            [ -n "$VIASH_PAR_NAMESPACE_SEPARATOR" ] && ViashError Bad arguments for option \'--namespace_separator=*\': \'$VIASH_PAR_NAMESPACE_SEPARATOR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAMESPACE_SEPARATOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --nextflow_variant)
            [ -n "$VIASH_PAR_NEXTFLOW_VARIANT" ] && ViashError Bad arguments for option \'--nextflow_variant\': \'$VIASH_PAR_NEXTFLOW_VARIANT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NEXTFLOW_VARIANT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --nextflow_variant. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --nextflow_variant=*)
            [ -n "$VIASH_PAR_NEXTFLOW_VARIANT" ] && ViashError Bad arguments for option \'--nextflow_variant=*\': \'$VIASH_PAR_NEXTFLOW_VARIANT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NEXTFLOW_VARIANT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_threads)
            [ -n "$VIASH_PAR_MAX_THREADS" ] && ViashError Bad arguments for option \'--max_threads\': \'$VIASH_PAR_MAX_THREADS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_THREADS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_threads. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_threads=*)
            [ -n "$VIASH_PAR_MAX_THREADS" ] && ViashError Bad arguments for option \'--max_threads=*\': \'$VIASH_PAR_MAX_THREADS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_THREADS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --config_mod)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --config_mod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --config_mod=*)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -c)
            if [ -z "$VIASH_PAR_CONFIG_MOD" ]; then
              VIASH_PAR_CONFIG_MOD="$2"
            else
              VIASH_PAR_CONFIG_MOD="$VIASH_PAR_CONFIG_MOD;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -c. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tsv)
            [ -n "$VIASH_PAR_TSV" ] && ViashError Bad arguments for option \'--tsv\': \'$VIASH_PAR_TSV\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TSV="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tsv. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tsv=*)
            [ -n "$VIASH_PAR_TSV" ] && ViashError Bad arguments for option \'--tsv=*\': \'$VIASH_PAR_TSV\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TSV=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --no_cache)
            [ -n "$VIASH_PAR_NO_CACHE" ] && ViashError Bad arguments for option \'--no_cache\': \'$VIASH_PAR_NO_CACHE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        -nc)
            [ -n "$VIASH_PAR_NO_CACHE" ] && ViashError Bad arguments for option \'-nc\': \'$VIASH_PAR_NO_CACHE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        --no-cache)
            [ -n "$VIASH_PAR_NO_CACHE" ] && ViashError Bad arguments for option \'--no-cache\': \'$VIASH_PAR_NO_CACHE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NO_CACHE=true
            shift 1
            ;;
        --log)
            [ -n "$VIASH_PAR_LOG" ] && ViashError Bad arguments for option \'--log\': \'$VIASH_PAR_LOG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LOG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --log. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --log=*)
            [ -n "$VIASH_PAR_LOG" ] && ViashError Bad arguments for option \'--log=*\': \'$VIASH_PAR_LOG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LOG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -l)
            [ -n "$VIASH_PAR_LOG" ] && ViashError Bad arguments for option \'-l\': \'$VIASH_PAR_LOG\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LOG="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -l. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --append)
            [ -n "$VIASH_PAR_APPEND" ] && ViashError Bad arguments for option \'--append\': \'$VIASH_PAR_APPEND\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPEND="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --append. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --append=*)
            [ -n "$VIASH_PAR_APPEND" ] && ViashError Bad arguments for option \'--append=*\': \'$VIASH_PAR_APPEND\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPEND=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --viash)
            [ -n "$VIASH_PAR_VIASH" ] && ViashError Bad arguments for option \'--viash\': \'$VIASH_PAR_VIASH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VIASH="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --viash. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --viash=*)
            [ -n "$VIASH_PAR_VIASH" ] && ViashError Bad arguments for option \'--viash=*\': \'$VIASH_PAR_VIASH\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VIASH=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --verbose)
            [ -n "$VIASH_PAR_VERBOSE" ] && ViashError Bad arguments for option \'--verbose\': \'$VIASH_PAR_VERBOSE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_VERBOSE=true
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


if [[ $# -gt 0 ]]; then
  VIASH_META_FUNCTIONALITY_NAME="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_RESOURCES_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_EXECUTABLE="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_TEMP_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_CPUS="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_B="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_KB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_MB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_GB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_TB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_PB="$1"
  shift 1
fi

# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_SRC+x} ]; then
  VIASH_PAR_SRC="src"
fi
if [ -z ${VIASH_PAR_MODE+x} ]; then
  VIASH_PAR_MODE="development"
fi
if [ -z ${VIASH_PAR_PLATFORM+x} ]; then
  VIASH_PAR_PLATFORM="docker"
fi
if [ -z ${VIASH_PAR_REGISTRY+x} ]; then
  VIASH_PAR_REGISTRY="ghcr.io"
fi
if [ -z ${VIASH_PAR_ORGANIZATION+x} ]; then
  VIASH_PAR_ORGANIZATION="openpipelines-bio"
fi
if [ -z ${VIASH_PAR_TARGET_IMAGE_SOURCE+x} ]; then
  VIASH_PAR_TARGET_IMAGE_SOURCE="https://github.com/openpipelines-bio/openpipeline"
fi
if [ -z ${VIASH_PAR_NO_CACHE+x} ]; then
  VIASH_PAR_NO_CACHE="false"
fi
if [ -z ${VIASH_PAR_APPEND+x} ]; then
  VIASH_PAR_APPEND="true"
fi
if [ -z ${VIASH_PAR_VIASH+x} ]; then
  VIASH_PAR_VIASH="bin/viash"
fi
if [ -z ${VIASH_PAR_VERBOSE+x} ]; then
  VIASH_PAR_VERBOSE="false"
fi


# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_MAX_THREADS" ]]; then
  if ! [[ "$VIASH_PAR_MAX_THREADS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_threads' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_NO_CACHE" ]]; then
  if ! [[ "$VIASH_PAR_NO_CACHE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--no_cache' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_APPEND" ]]; then
  if ! [[ "$VIASH_PAR_APPEND" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--append' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_VERBOSE" ]]; then
  if ! [[ "$VIASH_PAR_VERBOSE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--verbose' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi


# check whether parameters values are of the right type
































ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-viash_test-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_SRC+x} ]; then echo "${VIASH_PAR_SRC}" | sed "s#'#'\"'\"'#g;s#.*#par_src='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_MODE+x} ]; then echo "${VIASH_PAR_MODE}" | sed "s#'#'\"'\"'#g;s#.*#par_mode='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_PLATFORM+x} ]; then echo "${VIASH_PAR_PLATFORM}" | sed "s#'#'\"'\"'#g;s#.*#par_platform='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_QUERY+x} ]; then echo "${VIASH_PAR_QUERY}" | sed "s#'#'\"'\"'#g;s#.*#par_query='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_QUERY_NAMESPACE+x} ]; then echo "${VIASH_PAR_QUERY_NAMESPACE}" | sed "s#'#'\"'\"'#g;s#.*#par_query_namespace='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_QUERY_NAME+x} ]; then echo "${VIASH_PAR_QUERY_NAME}" | sed "s#'#'\"'\"'#g;s#.*#par_query_name='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_TAG+x} ]; then echo "${VIASH_PAR_TAG}" | sed "s#'#'\"'\"'#g;s#.*#par_tag='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_REGISTRY+x} ]; then echo "${VIASH_PAR_REGISTRY}" | sed "s#'#'\"'\"'#g;s#.*#par_registry='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_ORGANIZATION+x} ]; then echo "${VIASH_PAR_ORGANIZATION}" | sed "s#'#'\"'\"'#g;s#.*#par_organization='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_TARGET_IMAGE_SOURCE+x} ]; then echo "${VIASH_PAR_TARGET_IMAGE_SOURCE}" | sed "s#'#'\"'\"'#g;s#.*#par_target_image_source='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_NAMESPACE_SEPARATOR+x} ]; then echo "${VIASH_PAR_NAMESPACE_SEPARATOR}" | sed "s#'#'\"'\"'#g;s#.*#par_namespace_separator='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_NEXTFLOW_VARIANT+x} ]; then echo "${VIASH_PAR_NEXTFLOW_VARIANT}" | sed "s#'#'\"'\"'#g;s#.*#par_nextflow_variant='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_MAX_THREADS+x} ]; then echo "${VIASH_PAR_MAX_THREADS}" | sed "s#'#'\"'\"'#g;s#.*#par_max_threads='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_CONFIG_MOD+x} ]; then echo "${VIASH_PAR_CONFIG_MOD}" | sed "s#'#'\"'\"'#g;s#.*#par_config_mod='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_TSV+x} ]; then echo "${VIASH_PAR_TSV}" | sed "s#'#'\"'\"'#g;s#.*#par_tsv='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_NO_CACHE+x} ]; then echo "${VIASH_PAR_NO_CACHE}" | sed "s#'#'\"'\"'#g;s#.*#par_no_cache='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_LOG+x} ]; then echo "${VIASH_PAR_LOG}" | sed "s#'#'\"'\"'#g;s#.*#par_log='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_APPEND+x} ]; then echo "${VIASH_PAR_APPEND}" | sed "s#'#'\"'\"'#g;s#.*#par_append='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_VIASH+x} ]; then echo "${VIASH_PAR_VIASH}" | sed "s#'#'\"'\"'#g;s#.*#par_viash='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_VERBOSE+x} ]; then echo "${VIASH_PAR_VERBOSE}" | sed "s#'#'\"'\"'#g;s#.*#par_verbose='&'#" ; fi )
$( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "${VIASH_META_FUNCTIONALITY_NAME}" | sed "s#'#'\"'\"'#g;s#.*#meta_functionality_name='&'#" ; fi )
$( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "${VIASH_META_RESOURCES_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_resources_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "${VIASH_META_EXECUTABLE}" | sed "s#'#'\"'\"'#g;s#.*#meta_executable='&'#" ; fi )
$( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "${VIASH_META_TEMP_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_temp_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "${VIASH_META_CPUS}" | sed "s#'#'\"'\"'#g;s#.*#meta_cpus='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "${VIASH_META_MEMORY_B}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_b='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "${VIASH_META_MEMORY_KB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_kb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "${VIASH_META_MEMORY_MB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_mb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "${VIASH_META_MEMORY_GB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_gb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "${VIASH_META_MEMORY_TB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_tb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "${VIASH_META_MEMORY_PB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_pb='&'#" ; fi )

## VIASH END
#!/bin/bash

# start creating command
command_builder=(
  ns test
  --src "\$par_src"
  --parallel
)

# check par mode
if [ "\$par_mode" == "development" ]; then
  echo "In development mode with 'dev'."
elif [ "\$par_mode" == "integration" ]; then
  echo "In integration mode with tag '\$par_tag'."
elif [ "\$par_mode" == "release" ]; then
  echo "In RELEASE mode with tag '\$par_tag'."
else
  echo "Error: Not a valid mode argument '\$par_mode'."
  exit 1
fi

# check tag
if [ "\$par_mode" == "development" ]; then
  if [ ! -z "\$par_tag" ]; then
    echo "Warning: '--tag' is ignored when '--mode=\$par_mode'."
  fi
  par_tag="dev"
fi
if [ -z "\$par_tag" ]; then
  echo "Error: --tag is a requirement argument when '--mode=\$par_mode'."
  exit 1
fi

# derive setup strategy
if [ "\$par_mode" == "development" ]; then
  if [ "\$par_no_cache" == "true" ]; then
    setup_strat="build"
  else
    setup_strat="cachedbuild"
  fi
elif [ "\$par_mode" == "integration" ]; then
  echo "Warning: --par_no_cache is ignored when '--mode=\$par_mode'."
  setup_strat="ifneedbepullelsecachedbuild"
elif [ "\$par_mode" == "release" ]; then
  echo "Warning: --par_no_cache is ignored when '--mode=\$par_mode'."
  setup_strat="build"
fi

command_builder+=(
  --config_mod ".functionality.version := '\$par_tag'"
  --config_mod ".platforms[.type == 'docker'].setup_strategy := '\$setup_strat'"
)

# check registry and organization
if [ "\$par_mode" == "development" ]; then
  if [ ! -z "\$par_registry" ]; then
    [[ "\$par_verbose" == "true" ]] && echo "Note: --par_registry is ignored when '--mode=development'."
    unset par_registry
  fi

  if [ ! -z "\$par_organization" ]; then
    [[ "\$par_verbose" == "true" ]] && echo "Note: --par_organization is ignored when '--mode=development'."
    unset par_organization
  fi
fi

################ COMMON PARAMS ################

# check viash arg
# if not specified, default par_viash to look for 'viash' on the PATH
if [ -z "\$par_viash" ]; then
  par_viash="viash"
fi

# if specified, use par_max_threads as a java argument
if [ ! -z "\$par_max_threads" ]; then
  export JAVA_ARGS="\$JAVA_ARGS -Dscala.concurrent.context.maxThreads=\$par_max_threads"
fi

# process queries
if [ ! -z "\$par_query" ]; then
  command_builder+=("--query" "\$par_query")
fi
if [ ! -z "\$par_query_namespace" ]; then
  command_builder+=("--query_namespace" "\$par_query_namespace")
fi
if [ ! -z "\$par_query_name" ]; then
  command_builder+=("--query_name" "\$par_query_name")
fi

# process config mods
if [ ! -z "\$par_config_mod" ]; then
  IFS=";"
  for var in \$par_config_mod; do
    unset IFS
    command_builder+=("--config_mod" "\$var")
  done
fi

if [ ! -z "\$par_registry" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].target_registry := '\$par_registry'"
    --config_mod ".platforms[.type == 'nextflow' && .variant == 'legacy'].registry := '\$par_registry'"
  )
fi

if [ ! -z "\$par_organization" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].target_organization := '\$par_organization'"
    --config_mod ".platforms[.type == 'nextflow' && .variant == 'legacy'].organization := '\$par_organization'"
  )
fi

if [ ! -z "\$par_namespace_separator" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].namespace_separator := '\$par_namespace_separator'"
    --config_mod ".platforms[.type == 'nextflow' && .variant == 'legacy'].namespace_separator := '\$par_namespace_separator'"
  )
fi

if [ ! -z "\$par_target_image_source" ]; then
  command_builder+=(
    --config_mod ".platforms[.type == 'docker'].target_image_source := '\$par_target_image_source'"
  )
fi

if [ ! -z "\$par_platform" ]; then
  command_builder+=(--platform "\$par_platform")
fi

if [ "\$par_append" == "true" ]; then
  command_builder+=("--append")
fi

if [ ! -z "\$par_tsv" ]; then
  command_builder+=(--tsv "\$par_tsv")
fi

################ RUN COMMAND ################
[[ "\$par_verbose" == "true" ]] && echo "+ \$par_viash" "\${command_builder[@]}"

if [ -z "\$par_log" ]; then
  "\$par_viash" "\${command_builder[@]}"
else
  [ ! -f "\$par_log" ] || rm "\$par_log"
  "\$par_viash" "\${command_builder[@]}" > >(tee -a "\$par_log") 2> >(tee -a "\$par_log")
fi

VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF

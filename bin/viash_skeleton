#!/usr/bin/env bash

# viash_skeleton 0.6.3
# 
# This wrapper script is auto-generated by viash 0.6.3 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="viash_skeleton"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "viash_skeleton 0.6.3"
  echo ""
  echo "Create a skeleton src component"
  echo ""
  echo "Arguments:"
  echo "    -n, --name"
  echo "        type: string, required parameter"
  echo "        Name of the component"
  echo ""
  echo "    -ns, --namespace"
  echo "        type: string"
  echo "        Namespace of the component"
  echo ""
  echo "    -l, --language"
  echo "        type: string"
  echo "        default: bash"
  echo "        Which scripting language to use. Possible values are 'bash', 'r', and"
  echo "        'python'."
  echo ""
  echo "    -p, --platform"
  echo "        type: string, multiple values allowed"
  echo "        default: docker,native,nextflow"
  echo "        Which platforms to add. Possible values are 'native', 'docker',"
  echo "        'nextflow'. By default, all three will be added."
  echo ""
  echo "    --src"
  echo "        type: file, output"
  echo "        default: src"
  echo "        Target directory if different from src/"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "viash_skeleton 0.6.3"
            exit
            ;;
        --name)
            [ -n "$VIASH_PAR_NAME" ] && ViashError Bad arguments for option \'--name\': \'$VIASH_PAR_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --name. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --name=*)
            [ -n "$VIASH_PAR_NAME" ] && ViashError Bad arguments for option \'--name=*\': \'$VIASH_PAR_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -n)
            [ -n "$VIASH_PAR_NAME" ] && ViashError Bad arguments for option \'-n\': \'$VIASH_PAR_NAME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -n. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --namespace)
            [ -n "$VIASH_PAR_NAMESPACE" ] && ViashError Bad arguments for option \'--namespace\': \'$VIASH_PAR_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAMESPACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --namespace. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --namespace=*)
            [ -n "$VIASH_PAR_NAMESPACE" ] && ViashError Bad arguments for option \'--namespace=*\': \'$VIASH_PAR_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAMESPACE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -ns)
            [ -n "$VIASH_PAR_NAMESPACE" ] && ViashError Bad arguments for option \'-ns\': \'$VIASH_PAR_NAMESPACE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NAMESPACE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -ns. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --language)
            [ -n "$VIASH_PAR_LANGUAGE" ] && ViashError Bad arguments for option \'--language\': \'$VIASH_PAR_LANGUAGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LANGUAGE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --language. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --language=*)
            [ -n "$VIASH_PAR_LANGUAGE" ] && ViashError Bad arguments for option \'--language=*\': \'$VIASH_PAR_LANGUAGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LANGUAGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -l)
            [ -n "$VIASH_PAR_LANGUAGE" ] && ViashError Bad arguments for option \'-l\': \'$VIASH_PAR_LANGUAGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LANGUAGE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -l. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --platform)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM="$2"
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --platform. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --platform=*)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -p)
            if [ -z "$VIASH_PAR_PLATFORM" ]; then
              VIASH_PAR_PLATFORM="$2"
            else
              VIASH_PAR_PLATFORM="$VIASH_PAR_PLATFORM,""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -p. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --src)
            [ -n "$VIASH_PAR_SRC" ] && ViashError Bad arguments for option \'--src\': \'$VIASH_PAR_SRC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SRC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --src. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --src=*)
            [ -n "$VIASH_PAR_SRC" ] && ViashError Bad arguments for option \'--src=*\': \'$VIASH_PAR_SRC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SRC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


if [[ $# -gt 0 ]]; then
  VIASH_META_FUNCTIONALITY_NAME="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_RESOURCES_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_EXECUTABLE="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_TEMP_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_CPUS="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_B="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_KB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_MB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_GB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_TB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_PB="$1"
  shift 1
fi

# check whether required parameters exist
if [ -z ${VIASH_PAR_NAME+x} ]; then
  ViashError '--name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_LANGUAGE+x} ]; then
  VIASH_PAR_LANGUAGE="bash"
fi
if [ -z ${VIASH_PAR_PLATFORM+x} ]; then
  VIASH_PAR_PLATFORM="docker,native,nextflow"
fi
if [ -z ${VIASH_PAR_SRC+x} ]; then
  VIASH_PAR_SRC="src"
fi


# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi


# check whether parameters values are of the right type

















ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-viash_skeleton-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_NAME+x} ]; then echo "${VIASH_PAR_NAME}" | sed "s#'#'\"'\"'#g;s#.*#par_name='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_NAMESPACE+x} ]; then echo "${VIASH_PAR_NAMESPACE}" | sed "s#'#'\"'\"'#g;s#.*#par_namespace='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_LANGUAGE+x} ]; then echo "${VIASH_PAR_LANGUAGE}" | sed "s#'#'\"'\"'#g;s#.*#par_language='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_PLATFORM+x} ]; then echo "${VIASH_PAR_PLATFORM}" | sed "s#'#'\"'\"'#g;s#.*#par_platform='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_SRC+x} ]; then echo "${VIASH_PAR_SRC}" | sed "s#'#'\"'\"'#g;s#.*#par_src='&'#" ; fi )
$( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "${VIASH_META_FUNCTIONALITY_NAME}" | sed "s#'#'\"'\"'#g;s#.*#meta_functionality_name='&'#" ; fi )
$( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "${VIASH_META_RESOURCES_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_resources_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "${VIASH_META_EXECUTABLE}" | sed "s#'#'\"'\"'#g;s#.*#meta_executable='&'#" ; fi )
$( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "${VIASH_META_TEMP_DIR}" | sed "s#'#'\"'\"'#g;s#.*#meta_temp_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "${VIASH_META_CPUS}" | sed "s#'#'\"'\"'#g;s#.*#meta_cpus='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "${VIASH_META_MEMORY_B}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_b='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "${VIASH_META_MEMORY_KB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_kb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "${VIASH_META_MEMORY_MB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_mb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "${VIASH_META_MEMORY_GB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_gb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "${VIASH_META_MEMORY_TB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_tb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "${VIASH_META_MEMORY_PB}" | sed "s#'#'\"'\"'#g;s#.*#meta_memory_pb='&'#" ; fi )

## VIASH END
#!/bin/bash


# check par_language
if [[ \$par_language =~ ^bash|sh|Bash\$ ]]; then
  script_lang=bash
elif [[ \$par_language =~ ^r|R\$ ]]; then
  script_lang=r
elif [[ \$par_language =~ ^py|python|Python\$ ]]; then
  script_lang=python
else 
  echo "Unrecognised language: \$par_language; please specify one of 'python', 'r', or 'bash'"
  exit 1
fi

# create output dir
out_dir="\$par_src/\$par_namespace/\$par_name"
mkdir -p "\$out_dir"

##################################################################################
###                                FUNCTIONALITY                               ###
##################################################################################

# write header
cat > "\$out_dir/config.vsh.yaml" << HERE
functionality:
  name: "\$par_name"
HERE

# write namespace, if need be
if [ ! -z "\$par_namespace" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  namespace: "\$par_namespace"
HERE
fi

# write more metadata and initial arguments
cat >> "\$out_dir/config.vsh.yaml" << HERE
  version: 0.0.1
  description: |
    Replace this with a (multiline) description of your component.
  arguments:
    - name: "--input"
      alternatives: [ "-i" ]
      type: file
      required: true
      description: Describe the input file.
      example: input.txt
    - name: "--output"
      alternatives: [ "-o" ]
      type: file
      direction: output
      required: true
      description: Describe the output file.
      example: output.txt
    - name: "--option"
      type: string
      description: Describe an optional parameter.
      default: "default-"
HERE

##################################################################################
###                                 BASH SCRIPTS                               ###
##################################################################################
if [ \$script_lang == "bash" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: bash_script
      path: script.sh
  test_resources:
    - type: bash_script
      path: test.sh
HERE

cat >> "\$out_dir/script.sh" << 'HERE'
#!/bin/bash

echo "This is a skeleton component"
echo "The arguments are:"
echo " - input:  \$par_input"
echo " - output: \$par_output"
echo " - option: \$par_option"
echo

echo "Writing output file"
cat "\$par_input" | sed "s#.*#\$par_option-&#" > "\$par_output"
HERE

cat >> "\$out_dir/test.sh" << MAJORHERE
#!/bin/bash

set -ex

echo ">>> Creating dummy input file"
cat > input.txt << HERE
one
two
three
HERE

echo ">>> Running executable"
./\$par_name --input input.txt --output output.txt --option FOO

echo ">>> Checking whether output file exists"
[[ ! -f output.txt ]] && echo "Output file could not be found!" && exit 1

# create expected output file
cat > expected_output.txt << HERE
FOO-one
FOO-two
FOO-three
HERE

echo ">>> Checking whether content matches expected content"
diff output.txt expected_output.txt
[ \\\$? -ne 0 ] && echo "Output file did not equal expected output" && exit 1

# print final message
echo ">>> Test finished successfully"

# do not remove this
# as otherwise your test might exit with a different exit code
exit 0
MAJORHERE

##################################################################################
###                                 RLANG SCRIPTS                              ###
##################################################################################
elif [ \$script_lang == "r" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: r_script
      path: script.R
  test_resources:
    - type: r_script
      path: test.R
HERE
cat >> "\$out_dir/script.R" << 'HERE'
cat("This is a skeleton component\\n")
cat("The arguments are:\\n")
cat(" - input: ", par\$input, "\\n", sep = "")
cat(" - output: ", par\$output, "\\n", sep = "")
cat(" - option: ", par\$option, "\\n", sep = "")
cat("\\n")

cat("Reading input file\\n")
lines <- readLines(par\$input)

cat("Running output algorithm\\n")
new_lines <- paste0(par\$option, "-", lines)

cat("Writing output file\\n")
writeLines(new_lines, con = par\$output)
HERE

cat >> "\$out_dir/test.R" << HERE
library(testthat)

# create dummy input file
old_lines <- c("one", "two", "three")
writeLines(old_lines, "input.txt")

# run executable
system("./\$par_name --input input.txt --output output.txt --option FOO")

# check whether output file exists
expect_true(file.exists("output.txt"))

# check whether content matches expected content
expected_lines <- c("FOO-one", "FOO-two", "FOO-three")
new_lines <- readLines("output.txt")
expect_equal(new_lines, expected_lines)

cat(">>> Test finished successfully!")
HERE

##################################################################################
###                                PYTHON SCRIPTS                              ###
##################################################################################
elif [ \$script_lang == "python" ]; then
cat >> "\$out_dir/config.vsh.yaml" << HERE
  resources:
    - type: python_script
      path: script.py
  test_resources:
    - type: python_script
      path: test.py
HERE

cat >> "\$out_dir/script.py" << 'HERE'
print("This is a skeleton component")
print("The arguments are:")
print(" - input: ", par["input"])
print(" - output: ", par["output"])
print(" - option: ", par["option"])
print("")


with open(par["input"], "r") as reader, open(par["output"], "w") as writer:
    lines = reader.readlines()
    
    new_lines = [par["option"] + x for x in lines]
    
    writer.writelines(new_lines)
HERE

cat >> "\$out_dir/test.py" << HERE
import unittest
import os
from os import path
import subprocess

print(">> Writing test file")
with open("input.txt", "w") as writer:
    writer.writelines(["one\\n", "two\\n", "three\\n"])

print(">> Running component")
out = subprocess.check_output(["./\$par_name", "--input", "input.txt", "--output", "output.txt", "--option", "FOO-"]).decode("utf-8")

print(">> Checking whether output file exists")
assert path.exists("output.txt")

print(">> Checking contents of output file")
with open("output.txt", "r") as reader:
    lines = reader.readlines()
assert lines == ["FOO-one\\n", "FOO-two\\n", "FOO-three\\n"]

print(">> All tests succeeded successfully!")
HERE

fi

##################################################################################
###                                  PLATFORMS                                 ###
##################################################################################
# write platforms
cat >> "\$out_dir/config.vsh.yaml" << HERE
platforms:
HERE

# iterate over different specified platforms
IFS=','
set -f
for platform in \$par_platform; do
  unset IFS
  if [ \$platform == "docker" ]; then
  
    # choose different default docker image based on language
    if [ \$script_lang == "bash" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: ubuntu:20.04
    setup:
      - type: apt
        packages: 
          - bash
HERE

    elif [ \$script_lang == "r" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: rocker/tidyverse:4.0.4
    setup:
      - type: r
        packages: 
          - princurve
HERE

    elif [ \$script_lang == "python" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: docker
    image: python:3.9.3-buster
    setup:
      - type: python
        packages: 
          - numpy
HERE
    fi
  
  elif [ \$platform == "native" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: native
HERE
  
  elif [ \$platform == "nextflow" ]; then
    cat >> "\$out_dir/config.vsh.yaml" << HERE
  - type: nextflow
HERE

  fi
done
set +f



  

VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
